{"version":3,"sources":["features/box/box.module.css","features/employee/employee.module.css","features/employeeList/employeeList.module.css","features/home/home.module.css","features/box/box.js","features/employee/employee.js","features/employeeList/employeeList.js","features/home/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BoxComponent","props","className","styles","box","data","clickedByPlayer1","alt","src","Employee","employee","employee_name","Intl","NumberFormat","style","currency","format","employee_salary","EmployeeList","container","map","item","index","HomeComponent","state","boxSize","isPlayer1","employeeList","filteredEmployeeList","sequenceOfClicks","undoLastMove","previousMove","pop","x","y","setState","this","make2DArray","getEmployeeList","size","array","Array","i","addValue2Darray","length","j","xIndex","yIndex","undefined","push","modifyFilteredEmployeeList","resetGame","axios","get","then","response","catch","alert","randomIndex","Math","floor","random","fullWidth","root","subRoot","cell","boxSelection","boxSelectionInactive","onClick","updateBox","undoContainer","disabled","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff17ca28.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"box_box__14OjN\",\"slidein\":\"box_slidein__1lOh8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"employee\":\"employee_employee__3ofYm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"employeeList_container__2Zgos\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__2K_G0\",\"root\":\"home_root__PztTc\",\"fullWidth\":\"home_fullWidth__1XtxZ\",\"boxSelection\":\"home_boxSelection__3UfK2\",\"myfirst\":\"home_myfirst__2R01L\",\"boxSelectionInactive\":\"home_boxSelectionInactive__3W3w3\",\"undoContainer\":\"home_undoContainer__1kUa8\"};","import React from 'react';\r\nimport styles from './box.module.css';\r\n\r\nconst BoxComponent = (props) => {\r\n    return (\r\n        <div className={styles.box}>\r\n            { props.data.clickedByPlayer1 === true ? <img alt=\"player1\" src=\"http://giphygifs.s3.amazonaws.com/media/jQS9YkJXofyeI/giphy.gif\" /> : null}\r\n            { props.data.clickedByPlayer1 === false ? <img alt=\"player2\" src=\"https://media.giphy.com/media/5kFbMBOEdWjg1nItoG/giphy.gif\" /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoxComponent;","import React from 'react';\r\nimport styles from './employee.module.css';\r\n\r\nconst Employee = (props) => {\r\n    return (\r\n        <div className={styles.employee}>\r\n            <h4>{props.data.employee_name}, {new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(props.data.employee_salary)}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Employee;","import React from 'react';\r\nimport Employee from '../employee/employee';\r\nimport styles from './employeeList.module.css';\r\n\r\nconst EmployeeList = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.container}>\r\n                { props.data.map((item, index) => {\r\n                    return <Employee key={index} data={item} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeList;","// import { current } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport BoxComponent from '../box/box';\r\nimport EmployeeList from '../employeeList/employeeList';\r\nimport styles from './home.module.css';\r\n\r\nexport default class HomeComponent extends Component {\r\n\r\n\r\n    /**\r\n     * Global State, boxSize : 2D Array, for drawing UI\r\n     * isPlayer1 : checks whose chance is it\r\n     * employeeList : List fetched from API\r\n     * fiteredEmployeeList: List filtered from employee list and pushed on box click\r\n     * SequenceOfCLicks: Queue for keeping track of moves\r\n     * @memberof HomeComponent\r\n     */\r\n    state = {\r\n        boxSize: [],\r\n        isPlayer1: true,\r\n        employeeList: [],\r\n        filteredEmployeeList: [],\r\n        sequenceOfClicks: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            boxSize: this.make2DArray(3)\r\n        })\r\n\r\n        this.getEmployeeList();\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} size\r\n     * @returns\r\n     * @memberof HomeComponent\r\n     * Makes 2D Array to be set for BoardSize\r\n     */\r\n    make2DArray(size) {\r\n        let array = new Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            array[i] = new Array(size);\r\n        }\r\n        array = this.addValue2Darray(array);\r\n        return array;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} array\r\n     * @returns\r\n     * @memberof HomeComponent\r\n     * Adds index value to the array indexes\r\n     */\r\n    addValue2Darray(array) {\r\n        for (let i = 0; i < array.length; i++) {\r\n            for (let j = 0; j < array[i].length; j++) {\r\n                array[i][j] = `${i}${j}`;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} isPlayer1\r\n     * @param {*} index\r\n     * @param {*} yIndex\r\n     * @memberof HomeComponent\r\n     * Called when player clicks on boxes\r\n     */\r\n    updateBox(isPlayer1, xIndex, yIndex) {\r\n        let array = this.state.boxSize;\r\n\r\n        // If block to check if x index can be clicked or not\r\n        if (xIndex === 2 || array[xIndex + 1][yIndex].clickedByPlayer1 !== undefined) {\r\n            if (array[xIndex][yIndex].clickedByPlayer1 === undefined && this.state.employeeList.length > 0) {\r\n                array[xIndex][yIndex] = { clickedByPlayer1: isPlayer1, x: xIndex, y: yIndex }\r\n                let sequenceOfClicks = this.state.sequenceOfClicks;\r\n                sequenceOfClicks.push(array[xIndex][yIndex]);\r\n                this.setState({\r\n                    boxSize: array,\r\n                    isPlayer1: !isPlayer1,\r\n                    sequenceOfClicks: sequenceOfClicks\r\n                });\r\n\r\n                this.modifyFilteredEmployeeList();\r\n                let isArrayFull = this.state.sequenceOfClicks.length === 9 ? true : false\r\n                if (isArrayFull) {\r\n                    this.resetGame();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     *\r\n     * @memberof HomeComponent\r\n     * Fetches employee list from backend\r\n     */\r\n    getEmployeeList() {\r\n        axios.get('http://dummy.restapiexample.com/api/v1/employees').then((response) => {\r\n            this.setState({\r\n                employeeList: response.data.data\r\n            })\r\n        }).catch(() => {\r\n            alert('Error from API, Please refresh')\r\n            this.setState({\r\n                employeeList: []\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     *\r\n     * @memberof HomeComponent\r\n     * Pushes random picked value from employeelist\r\n     */\r\n    modifyFilteredEmployeeList() {\r\n        let employeeList = this.state.employeeList;\r\n        let randomIndex = Math.floor(Math.random() * employeeList.length - 1) + 1;\r\n        let filteredEmployeeList = this.state.filteredEmployeeList;\r\n        filteredEmployeeList.push(employeeList[randomIndex]);\r\n        this.setState({\r\n            filteredEmployeeList: filteredEmployeeList\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @memberof HomeComponent\r\n     * Resets game when grid is full\r\n     */\r\n    resetGame() {\r\n        this.setState({\r\n            boxSize: this.make2DArray(3),\r\n            isPlayer1: true,\r\n            filteredEmployeeList: [],\r\n            sequenceOfClicks: []\r\n        })\r\n        alert('Game over');\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     *\r\n     * @memberof HomeComponent\r\n     * undo the last move\r\n     */\r\n    undoLastMove = () => {\r\n        let filteredEmployeeList = this.state.filteredEmployeeList;\r\n        let sequenceOfClicks = this.state.sequenceOfClicks;\r\n        let previousMove = sequenceOfClicks.pop();\r\n        let boxSize = this.state.boxSize;\r\n        filteredEmployeeList.pop();\r\n        boxSize[previousMove.x][previousMove.y] = previousMove.x + previousMove.y;\r\n        this.setState({\r\n            filteredEmployeeList: filteredEmployeeList,\r\n            boxSize: boxSize,\r\n            sequenceOfClicks: sequenceOfClicks\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.fullWidth}>\r\n                <h1>{this.state.isPlayer1 ? `Player 1` : `Player 2`}  Your Chance</h1>\r\n                <div className={styles.root}>\r\n                    <div className={styles.subRoot}>\r\n                        {\r\n                            this.state.boxSize.map((item, xIndex) => {\r\n                                return (\r\n                                    <div key={xIndex} className={styles.container}>\r\n                                        {\r\n                                            item.map((cell, yIndex) => {\r\n                                                return (\r\n                                                    <div className={(xIndex === 2 || this.state.boxSize[xIndex + 1][yIndex].clickedByPlayer1 !== undefined) ? styles.boxSelection : styles.boxSelectionInactive} key={yIndex} onClick={() => this.updateBox(this.state.isPlayer1, xIndex, yIndex)}>\r\n                                                        <BoxComponent data={this.state.boxSize[xIndex][yIndex]} />\r\n                                                    </div>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <div className={styles.undoContainer}>\r\n                            <h1>Employee List</h1>\r\n                            <button disabled={this.state.filteredEmployeeList.length === 0} onClick={this.undoLastMove} >Undo Last Move</button>\r\n                        </div>\r\n                        <EmployeeList data={this.state.filteredEmployeeList} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport HomeComponent from './features/home/home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <HomeComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}