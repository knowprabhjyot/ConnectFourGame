{"version":3,"sources":["features/employee/employee.module.css","features/employeeList/employeeList.module.css","features/home/home.module.css","features/box/box.js","features/employee/employee.js","features/employeeList/employeeList.js","features/home/home.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js","features/box/box.module.css"],"names":["module","exports","BoxComponent","props","className","styles","box","data","clickedByPlayer1","image","alt","src","Employee","employee","employee_name","employee_salary","EmployeeList","container","map","item","index","HomeComponent","state","boxSize","isPlayer1","employeeList","filteredEmployeeList","totalClicks","sequenceOfClicks","undoLastMove","previousMove","pop","x","y","setState","this","make2DArray","getEmployeeList","size","array","Array","i","addValue2Darray","length","j","valIndex","undefined","push","modifyFilteredEmployeeList","resetGame","axios","get","then","response","catch","error","alert","randomIndex","Math","floor","random","fullWidth","root","subRoot","cell","boxSelection","onClick","updateBox","undoContainer","disabled","Component","App","counterSlice","createSlice","name","initialState","value","reducers","increment","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0e61051.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"employee\":\"employee_employee__3ofYm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"employeeList_container__2Zgos\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__2K_G0\",\"root\":\"home_root__PztTc\",\"fullWidth\":\"home_fullWidth__1XtxZ\",\"boxSelection\":\"home_boxSelection__3UfK2\",\"undoContainer\":\"home_undoContainer__1kUa8\"};","import React from 'react';\r\nimport styles from './box.module.css';\r\n\r\nconst BoxComponent = (props) => {\r\n    return (\r\n        <div className={styles.box}>\r\n            { props.data.clickedByPlayer1 === true ? <img className={styles.image} alt=\"player1\" src=\"http://giphygifs.s3.amazonaws.com/media/jQS9YkJXofyeI/giphy.gif\" /> : null}\r\n            { props.data.clickedByPlayer1 === false ? <img className={styles.image} alt=\"player2\" src=\"https://media.giphy.com/media/5kFbMBOEdWjg1nItoG/giphy.gif\" /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoxComponent;","import React from 'react';\r\nimport styles from './employee.module.css';\r\n\r\nconst Employee = (props) => {\r\n    return (\r\n        <div className={styles.employee}>\r\n            {props.data.employee_name}, ${props.data.employee_salary}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Employee;","import React from 'react';\r\nimport Employee from '../employee/employee';\r\nimport styles from './employeeList.module.css';\r\n\r\nconst EmployeeList = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.container}>\r\n                { props.data.map((item, index) => {\r\n                    return <Employee key={index} data={item} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeList;","// import { current } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport BoxComponent from '../box/box';\r\nimport EmployeeList from '../employeeList/employeeList';\r\nimport styles from './home.module.css';\r\n\r\nexport default class HomeComponent extends Component {\r\n\r\n    state = {\r\n        boxSize: [],\r\n        isPlayer1: true,\r\n        employeeList: [],\r\n        filteredEmployeeList: [],\r\n        totalClicks: 0,\r\n        sequenceOfClicks: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            boxSize: this.make2DArray(3)\r\n        })\r\n\r\n        this.getEmployeeList();\r\n    }\r\n\r\n    make2DArray(size) {\r\n        let array = new Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            array[i] = new Array(size);\r\n        }\r\n        array = this.addValue2Darray(array);\r\n        return array;\r\n    }\r\n\r\n    addValue2Darray(array) {\r\n        for (let i = 0; i < array.length; i++) {\r\n            for (let j = 0; j < array[i].length; j++) {\r\n                array[i][j] = `${i}${j}`;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    updateBox(isPlayer1, index, valIndex) {\r\n        let array = this.state.boxSize;\r\n        if (array[index][valIndex].clickedByPlayer1 === undefined && this.state.employeeList.length > 0) {\r\n            array[index][valIndex] = { clickedByPlayer1: isPlayer1, x: index, y: valIndex }\r\n            let sequenceOfClicks = this.state.sequenceOfClicks;\r\n            sequenceOfClicks.push(array[index][valIndex]);\r\n            this.setState({\r\n                boxSize: array,\r\n                isPlayer1: !isPlayer1,\r\n                totalClicks: this.state.totalClicks + 1,\r\n                sequenceOfClicks: sequenceOfClicks\r\n            });\r\n\r\n            this.modifyFilteredEmployeeList();\r\n            let isArrayFull = this.state.totalClicks === 8 ? true : false\r\n            if (isArrayFull) {\r\n                this.resetGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    getEmployeeList() {\r\n        axios.get('http://dummy.restapiexample.com/api/v1/employees').then((response) => {\r\n            this.setState({\r\n                employeeList: response.data.data\r\n            })\r\n        }).catch((error) => {\r\n            alert('Error from API')\r\n            this.setState({\r\n                employeeList: []\r\n            })\r\n        })\r\n    }\r\n\r\n    modifyFilteredEmployeeList() {\r\n        let employeeList = this.state.employeeList;\r\n        let randomIndex = Math.floor(Math.random() * employeeList.length - 1)  + 1;\r\n        let filteredEmployeeList = this.state.filteredEmployeeList;\r\n        filteredEmployeeList.push(employeeList[randomIndex]);\r\n        this.setState({\r\n            filteredEmployeeList: filteredEmployeeList\r\n        })\r\n    }\r\n\r\n    resetGame() {\r\n        alert('Game over');\r\n        this.setState({\r\n            boxSize: this.make2DArray(3),\r\n            isPlayer1: true,\r\n            totalClicks: 0,\r\n            filteredEmployeeList: []\r\n        })\r\n    }\r\n\r\n    undoLastMove = () => {\r\n        let filteredEmployeeList = this.state.filteredEmployeeList;\r\n        let sequenceOfClicks = this.state.sequenceOfClicks;\r\n        let previousMove = sequenceOfClicks.pop();\r\n        let boxSize = this.state.boxSize;\r\n        filteredEmployeeList.pop();\r\n        boxSize[previousMove.x][previousMove.y] = previousMove.x+previousMove.y;\r\n        this.setState({\r\n            filteredEmployeeList: filteredEmployeeList,\r\n            totalClicks: this.state.totalClicks - 1,\r\n            boxSize: boxSize\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.fullWidth}>\r\n                <h1>{this.state.isPlayer1 ? `Player 1` : `Player 2`}  Your Chance</h1>\r\n                <div className={styles.root}>\r\n                <div className={styles.subRoot}>\r\n                {\r\n                    this.state.boxSize.map((item, index) => {\r\n                        return (\r\n                            <div key={index} className={styles.container}>\r\n                                {\r\n                                    item.map((cell, valIndex) => {\r\n                                        return (\r\n                                            <div className={styles.boxSelection} key={valIndex} onClick={() => this.updateBox(this.state.isPlayer1, index, valIndex)}>\r\n                                                <BoxComponent data={this.state.boxSize[index][valIndex]} />\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n                <div>\r\n                    <div className={styles.undoContainer}>\r\n                    <h1>Employee List</h1>\r\n                    <button disabled={this.state.filteredEmployeeList.length === 0} onClick={this.undoLastMove} >Undo Last Move</button>\r\n                    </div>\r\n                    <EmployeeList data={this.state.filteredEmployeeList} />\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n// import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport HomeComponent from './features/home/home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <HomeComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"box_box__14OjN\",\"image\":\"box_image__3ln_I\"};"],"sourceRoot":""}